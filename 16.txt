//Answer of 1

#include <stdio.h>

// function prototypes
int *biggest_of_two(int*, int*);
int *biggest_of_three(int*, int*, int*);

int main() {
    int a, b, c;
    int *biggest;

    // get input arguments
    printf("Enter two numbers: ");
    scanf("%d %d", &a, &b);

    // call biggest_of_two function
    biggest = biggest_of_two(&a, &b);
    printf("The biggest of %d and %d is %d.\n", a, b, *biggest);

    // get input arguments
    printf("Enter three numbers: ");
    scanf("%d %d %d", &a, &b, &c);

    // call biggest_of_three function
    biggest = biggest_of_three(&a, &b, &c);
    printf("The biggest of %d, %d, and %d is %d.\n", a, b, c, *biggest);

    return 0;
}

// function to get biggest of two numbers
int *biggest_of_two(int *a, int *b) {
    if (*a > *b) {
        return a;
    } else {
        return b;
    }
}

// function to get biggest of three numbers
int *biggest_of_three(int *a, int *b, int *c) {
    if (*a > *b && *a > *c) {
        return a;
    } else if (*b > *a && *b > *c) {
        return b;
    } else {
        return c;
    }
}




//Answer of 2

#include <stdio.h>

// function prototype
void div_rem(int a, int b, int *quotient, int *remainder);

int main() {
    int a, b, quotient, remainder;

    // get input arguments
    printf("Enter two numbers: ");
    scanf("%d %d", &a, &b);

    // call div_rem function
    div_rem(a, b, &quotient, &remainder);

    // print results
    printf("The quotient of %d and %d is %d.\n", a, b, quotient);
    printf("The remainder of %d and %d is %d.\n", a, b, remainder);

    return 0;
}

// function to find quotient and remainder of division calculation
void div_rem(int a, int b, int *quotient, int *remainder) {
    *quotient = a / b;    // calculate quotient
    *remainder = a % b;   // calculate remainder
}


//Answer of 3

#include <stdio.h>
#include <string.h>

int main()
{
    char str[100];
    char *p;
    int length = 0;

    printf("Input a string : ");
    fgets(str, sizeof(str), stdin);

    str[strcspn(str, "\n")] = 0;

    p = str;

    while (*p != '\0')
    {
        length++;
        p++;
    }

    printf("The length of the given string %s is:%d", str, length);

    return 0;
}


//Answer of 4

#include <stdio.h>

// function to print string in reverse using pointer
void reverse_string(char *str) {
    int length = 0;
    char *end = str;

    // loop to find end of string
    while (*end != '\0') {
        length++;
        end++;
    }
    end--; // move pointer back to last character

    // loop to print string in reverse
    while (end >= str) {
        printf("%c", *end);
        end--;
    }
}

int main() {
    char str[100];

    // get input string
    printf("Input a string : ");
    fgets(str, 100, stdin);

    // remove newline character from input string
    int i = 0;
    while (str[i] != '\n') {
        i++;
    }
    str[i] = '\0';

    // print string in reverse using pointer
    printf("Reverse of the string is : ");
    reverse_string(str);

    return 0;
}


//Answer of 5

#include <stdio.h>
#include <string.h>

int main() {
    char sentence[100];
    int i, len, count_words = 1, count_chars = 0;
    
    // get input sentence
    printf("Enter a sentence: ");
    fgets(sentence, 100, stdin);

    // remove newline character from input string
    len = strlen(sentence);
    if (sentence[len-1] == '\n') {
        sentence[len-1] = '\0';
    }

    // loop through sentence to count words and characters
    for (i = 0; sentence[i] != '\0'; i++) {
        if (sentence[i] == ' ') {
            count_words++; // increment word count when space is found
            printf("%d ", count_chars); // print character count for previous word
            count_chars = 0; // reset character count for next word
        } else {
            count_chars++; // increment character count for current word
        }
    }

    printf("%d\n", count_chars); // print character count for last word

    // print total number of words
    printf("Total number of words: %d\n", count_words);

    return 0;
}


//Answer of 6

#include <stdio.h>
#include <string.h>

int main() {
char sentence[100], result[100];
int i, j = 0, len;
// get input sentence
printf("Enter a sentence: ");
fgets(sentence, 100, stdin);

// remove newline character from input string
len = strlen(sentence);
if (sentence[len-1] == '\n') {
    sentence[len-1] = '\0';
}

// loop through sentence to delete white spaces and replace "." with ":"
for (i = 0; sentence[i] != '\0'; i++) {
    if (sentence[i] != ' ') { // ignore white spaces
        if (sentence[i] == '.') {
            result[j] = ':'; // replace "." with ":"
        } else {
            result[j] = sentence[i]; // copy non-space characters to result
        }
        j++;
    }
}
result[j] = '\0'; // add null character to end of result string

// print result string without white spaces and with ":" instead of "."
printf("Result string: %s\n", result);

return 0;
}

//Answer of 7

#include <stdio.h>
#include <string.h>

int main() {
    char str1[100], str2[100];

    // get input strings
    printf("Enter the first string: ");
    fgets(str1, 100, stdin);
    printf("Enter the second string: ");
    fgets(str2, 100, stdin);

    // remove newline characters from input strings
    int len1 = strlen(str1);
    if (str1[len1-1] == '\n') {
        str1[len1-1] = '\0';
    }

    int len2 = strlen(str2);
    if (str2[len2-1] == '\n') {
        str2[len2-1] = '\0';
    }

    // concatenate strings using strcat function
    strcat(str1, str2);

    // print concatenated string
    printf("Concatenated string: %s\n", str1);

    return 0;
}

//Answer of 8

#include <stdio.h>

void findFactorial(int *num, long int *fact);

int main() {
int num;
long int fact = 1;

// get input number
printf("Input a number: ");
scanf("%d", &num);

// find factorial using pointer
findFactorial(&num, &fact);

// print factorial
printf("%d's factorial: %ld\n", num, fact);

return 0;

}

void findFactorial(int *num, long int *fact) {
int i;
for (i = 1; i <= *num; i++) {
*fact *= i;
}
}


//Answer of 9

#include <stdio.h>

int *findMinMax(int arr[], int len);

int main() {
    int arr[] = {2, 5, 3, 9, 1};
    int len = sizeof(arr) / sizeof(arr[0]);
    int *result;

    // find minimum and maximum values using function call
    result = findMinMax(arr, len);

    // print minimum and maximum values
    printf("Minimum value: %d\n", result[0]);
    printf("Maximum value: %d\n", result[1]);

    return 0;
}

int *findMinMax(int arr[], int len) {
    static int result[2];
    int i;

    // initialize minimum and maximum values
    result[0] = arr[0];
    result[1] = arr[0];

    // loop through array to find minimum and maximum values
    for (i = 1; i < len; i++) {
        if (arr[i] < result[0]) {
            result[0] = arr[i]; // update minimum value
        }
        if (arr[i] > result[1]) {
            result[1] = arr[i]; // update maximum value
        }
    }

    return result;
}


//Answer of 10

#include <stdio.h>
#include <string.h>

int main() {
char names[5][20], temp[20];
int i, j;

// get input names
printf("Enter names: ");
for (i = 0; i < 5; i++) {
    scanf("%s", names[i]);
}

// sort names in alphabetical order
for (i = 0; i < 5; i++) {
    for (j = i + 1; j < 5; j++) {
        if (strcmp(names[i], names[j]) > 0) {
            strcpy(temp, names[i]);
            strcpy(names[i], names[j]);
            strcpy(names[j], temp);
        }
    }
}

// print sorted names
printf("alphabetical list:\n");
for (i = 0; i < 5; i++) {
    printf("%s\n", names[i]);
}

return 0;

}